/**
 * @license
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An enumeration of acceptable output modes:
 *   'pretty': Pretty print the results
 *   'json': JSON formatted results
 *   'html': An HTML report
 */
var OutputMode;
(function (OutputMode) {
    OutputMode[OutputMode["pretty"] = 0] = "pretty";
    OutputMode[OutputMode["json"] = 1] = "json";
    OutputMode[OutputMode["html"] = 2] = "html";
    OutputMode[OutputMode["none"] = 3] = "none";
})(OutputMode || (OutputMode = {}));
exports.OutputMode = OutputMode;
;
const fs = require('fs');
const ReportGenerator = require('../lighthouse-core/report/report-generator');
const Formatter = require('../lighthouse-core/formatters/formatter');
const log = require('../lighthouse-core/lib/log');
/**
 * Verify output path to use, either stdout or a file path.
 */
function checkOutputPath(path) {
    if (!path) {
        log.warn('Printer', 'No output path set; using stdout');
        return 'stdout';
    }
    return path;
}
exports.checkOutputPath = checkOutputPath;
function formatAggregationResultItem(score, suffix = '') {
    if (typeof score === 'boolean') {
        return score ? `${log.greenify(log.tick)}` : `${log.redify(log.cross)}`;
    }
    if (typeof score !== 'number') {
        return `${log.purple}${score}${log.reset}`;
    }
    let colorChoice = log.red;
    if (score > 45) {
        colorChoice = log.yellow;
    }
    if (score > 75) {
        colorChoice = log.green;
    }
    return `${colorChoice}${score}${suffix}${log.reset}`;
}
/**
 * Creates the results output in a format based on the `mode`.
 */
function createOutput(results, outputMode) {
    const reportGenerator = new ReportGenerator();
    // HTML report.
    if (outputMode === OutputMode.html) {
        return reportGenerator.generateHTML(results, 'cli');
    }
    // JSON report.
    if (outputMode === OutputMode.json) {
        return JSON.stringify(results, null, 2);
    }
    // No report (the new default)
    if (outputMode === OutputMode.none)
        return '';
    // Pretty printed CLI report.
    const version = results.lighthouseVersion;
    let output = `\n\n${log.bold}Lighthouse (${version}) results:${log.reset} ${results.url}\n\n`;
    results.aggregations.forEach(aggregation => {
        const total = aggregation.total ? ': ' + formatAggregationResultItem(Math.round(aggregation.total * 100), '%') : '';
        output += `${log.whiteSmallSquare} ${log.bold}${aggregation.name}${log.reset}${total}\n\n`;
        aggregation.score.forEach(item => {
            const score = (item.overall * 100).toFixed(0);
            if (item.name) {
                output += `${log.bold}${item.name}${log.reset}: ${item.scored ? formatAggregationResultItem(score, '%') : ''}\n`;
            }
            item.subItems.forEach(subitem => {
                let auditResult;
                if (typeof subitem === 'string') {
                    auditResult = results.audits[subitem];
                }
                else {
                    auditResult = subitem;
                }
                const formattedScore = auditResult.error ? `${log.redify('â€½')}` :
                    `${formatAggregationResultItem(auditResult.score)}`;
                let lineItem = ` ${log.doubleLightHorizontal} ${formattedScore} ${auditResult.description}`;
                if (auditResult.displayValue) {
                    lineItem += ` (${log.bold}${auditResult.displayValue}${log.reset})`;
                }
                output += `${lineItem}\n`;
                if (auditResult.debugString) {
                    output += `    ${auditResult.debugString}\n`;
                }
                if (auditResult.extendedInfo && auditResult.extendedInfo.value) {
                    const formatter = Formatter.getByName(auditResult.extendedInfo.formatter).getFormatter('pretty');
                    output += `${formatter(auditResult.extendedInfo.value)}`;
                }
            });
            output += '\n';
        });
    });
    return output;
}
exports.createOutput = createOutput;
/* istanbul ignore next */
/**
 * Writes the output to stdout.
 */
function writeToStdout(output) {
    return new Promise((resolve, reject) => {
        // small delay to avoid race with debug() logs
        setTimeout(_ => {
            process.stdout.write(`${output}\n`);
            resolve();
        }, 50);
    });
}
/**
 * Writes the output to a file.
 */
function writeFile(filePath, output, outputMode) {
    return new Promise((resolve, reject) => {
        // TODO: make this mkdir to the filePath.
        fs.writeFile(filePath, output, 'utf8', (err) => {
            if (err) {
                return reject(err);
            }
            log.log('Printer', `${OutputMode[outputMode]} output written to ${filePath}`);
            resolve();
        });
    });
}
/**
 * Writes the results.
 */
function write(results, mode, path) {
    return new Promise((resolve, reject) => {
        const outputPath = checkOutputPath(path);
        const output = createOutput(results, OutputMode[mode]);
        // Testing stdout is out of scope, and doesn't really achieve much besides testing Node,
        // so we will skip this chunk of the code.
        /* istanbul ignore if */
        if (outputPath === 'stdout') {
            return writeToStdout(output).then(_ => resolve(results));
        }
        return writeFile(outputPath, output, OutputMode[mode]).then(_ => {
            resolve(results);
        }).catch(err => reject(err));
    });
}
exports.write = write;
function GetValidOutputOptions() {
    return [OutputMode[OutputMode.pretty],
        OutputMode[OutputMode.json],
        OutputMode[OutputMode.html],
        OutputMode[OutputMode.none]];
}
exports.GetValidOutputOptions = GetValidOutputOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsWUFBWSxDQUFDOztBQUViOzs7OztHQUtHO0FBQ0gsSUFBSyxVQUF1QztBQUE1QyxXQUFLLFVBQVU7SUFBRywrQ0FBTSxDQUFBO0lBQUUsMkNBQUksQ0FBQTtJQUFFLDJDQUFJLENBQUE7SUFBRSwyQ0FBSSxDQUFBO0FBQUMsQ0FBQyxFQUF2QyxVQUFVLEtBQVYsVUFBVSxRQUE2QjtBQTRLMUMsZ0NBQVU7QUE1S2dDLENBQUM7QUFLN0MsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0FBQzlFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBR2xEOztHQUVHO0FBQ0gseUJBQXlCLElBQVk7SUFDbkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1YsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQW9KQywwQ0FBZTtBQWxKakIscUNBQXFDLEtBQWdDLEVBQUUsTUFBTSxHQUFHLEVBQUU7SUFDaEYsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDMUUsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLFdBQVcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2YsV0FBVyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDM0IsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2YsV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUNELE1BQU0sQ0FBQyxHQUFHLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN2RCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxzQkFBc0IsT0FBZ0IsRUFBRSxVQUFzQjtJQUM1RCxNQUFNLGVBQWUsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBRTlDLGVBQWU7SUFDZixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxlQUFlO0lBQ2YsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELDhCQUE4QjtJQUM5QixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLElBQUksQ0FBQztRQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFFOUMsNkJBQTZCO0lBQzdCLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUMxQyxJQUFJLE1BQU0sR0FBRyxPQUFPLEdBQUcsQ0FBQyxJQUFJLGVBQWUsT0FBTyxhQUFhLEdBQUcsQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBRTlGLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVc7UUFDdEMsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsMkJBQTJCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNwSCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsZ0JBQWdCLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxNQUFNLENBQUM7UUFFM0YsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSTtZQUM1QixNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTlDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNkLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLEdBQUcsMkJBQTJCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDO1lBQ25ILENBQUM7WUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPO2dCQUMzQixJQUFJLFdBQXdCLENBQUM7Z0JBRTdCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLFdBQVcsR0FBUyxPQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMvQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLFdBQVcsR0FBRyxPQUFzQixDQUFDO2dCQUN2QyxDQUFDO2dCQUVELE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMzRCxHQUFHLDJCQUEyQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUN4RCxJQUFJLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxjQUFjLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUM1RixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDN0IsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztnQkFDdEUsQ0FBQztnQkFDRCxNQUFNLElBQUksR0FBRyxRQUFRLElBQUksQ0FBQztnQkFDMUIsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLE1BQU0sSUFBSSxPQUFPLFdBQVcsQ0FBQyxXQUFXLElBQUksQ0FBQztnQkFDL0MsQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxJQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDL0QsTUFBTSxTQUFTLEdBQ1gsU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDbkYsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDM0QsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxJQUFJLElBQUksQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBK0RDLG9DQUFZO0FBN0RkLDBCQUEwQjtBQUMxQjs7R0FFRztBQUNILHVCQUF1QixNQUFjO0lBQ25DLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLDhDQUE4QztRQUM5QyxVQUFVLENBQUMsQ0FBQztZQUNWLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQztZQUNwQyxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNULENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVEOztHQUVHO0FBQ0gsbUJBQW1CLFFBQWdCLEVBQUUsTUFBYyxFQUFFLFVBQXNCO0lBQ3pFLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLHlDQUF5QztRQUN6QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBVTtZQUNoRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsQ0FBQztZQUNELEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUM5RSxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxlQUFlLE9BQWdCLEVBQUUsSUFBVSxFQUFFLElBQVk7SUFDdkQsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07UUFDakMsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLEVBQVEsVUFBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFOUQsd0ZBQXdGO1FBQ3hGLDBDQUEwQztRQUMxQyx3QkFBd0I7UUFDeEIsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzNELENBQUM7UUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQVEsVUFBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBWUMsc0JBQUs7QUFWUDtJQUNFLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFTO1FBQ3JDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFTO1FBQ25DLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFTO1FBQ25DLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFTLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBT0Msc0RBQXFCIn0=