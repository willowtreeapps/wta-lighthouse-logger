/**
 * @license
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _SIGINT = 'SIGINT';
const _SIGINT_EXIT_CODE = 130;
const _RUNTIME_ERROR_CODE = 1;
const _PROTOCOL_TIMEOUT_EXIT_CODE = 67;
const assetSaver = require('../lighthouse-core/lib/asset-saver.js');
const getFilenamePrefix = require('../lighthouse-core/lib/file-namer.js').getFilenamePrefix;
const chrome_launcher_1 = require("./chrome-launcher");
const Commands = require("./commands/commands");
const lighthouse = require('../lighthouse-core');
const log = require('../lighthouse-core/lib/log');
const Driver = require('../lighthouse-core/gather/driver.js');
const path = require("path");
const perfOnlyConfig = require('../lighthouse-core/config/perf.json');
const performanceXServer = require('./performance-experiment/server');
const Printer = require("./printer");
const randomPort = require("./random-port");
const yargs = require('yargs');
const opn = require('opn');
const updateNotifier = require('update-notifier');
const pkg = require('../package.json');
updateNotifier({ pkg }).notify(); // Tell user if there's a newer version of LH.
;
const cliFlags = yargs
    .help('help')
    .version(() => pkg.version)
    .showHelpOnFail(false, 'Specify --help for available options')
    .usage('$0 url')
    .group([
    'verbose',
    'quiet'
], 'Logging:')
    .describe({
    verbose: 'Displays verbose logging',
    quiet: 'Displays no progress, debug logs or errors'
})
    .group([
    'save-assets',
    'save-artifacts',
    'list-all-audits',
    'list-trace-categories',
    'config-path',
    'chrome-flags',
    'perf',
    'port',
    'max-wait-for-load'
], 'Configuration:')
    .describe({
    'disable-storage-reset': 'Disable clearing the browser cache and other storage APIs before a run',
    'disable-device-emulation': 'Disable Nexus 5X emulation',
    'disable-cpu-throttling': 'Disable CPU throttling',
    'disable-network-throttling': 'Disable network throttling',
    'save-assets': 'Save the trace contents & screenshots to disk',
    'save-artifacts': 'Save all gathered artifacts to disk',
    'list-all-audits': 'Prints a list of all available audits and exits',
    'list-trace-categories': 'Prints a list of all required trace categories and exits',
    'config-path': 'The path to the config JSON.',
    'chrome-flags': 'Custom flags to pass to Chrome.',
    'perf': 'Use a performance-test-only configuration',
    'port': 'The port to use for the debugging protocol. Use 0 for a random port',
    'max-wait-for-load': 'The timeout (in milliseconds) to wait before the page is considered done loading and the run should continue. WARNING: Very high values can lead to large traces and instability',
    'skip-autolaunch': 'Skip autolaunch of Chrome when already running instance is not found',
    'select-chrome': 'Interactively choose version of Chrome to use when multiple installations are found',
    'interactive': 'Open Lighthouse in interactive mode'
})
    .group([
    'output',
    'output-path',
    'view'
], 'Output:')
    .describe({
    'output': 'Reporter for the results, supports multiple values',
    'output-path': `The file path to output the results
Example: --output-path=./lighthouse-results.html`,
    'view': 'Open HTML report in your browser'
})
    .boolean([
    'disable-storage-reset',
    'disable-device-emulation',
    'disable-cpu-throttling',
    'disable-network-throttling',
    'save-assets',
    'save-artifacts',
    'list-all-audits',
    'list-trace-categories',
    'perf',
    'view',
    'skip-autolaunch',
    'select-chrome',
    'verbose',
    'quiet',
    'help',
    'interactive'
])
    .choices('output', Printer.GetValidOutputOptions())
    .default('chrome-flags', '')
    .default('disable-cpu-throttling', true)
    .default('output', Printer.GetValidOutputOptions()[Printer.OutputMode.none])
    .default('output-path', 'stdout')
    .default('port', 9222)
    .default('max-wait-for-load', Driver.MAX_WAIT_FOR_FULLY_LOADED)
    .check((argv) => {
    // Make sure lighthouse has been passed a url, or at least one of --list-all-audits
    // or --list-trace-categories. If not, stop the program and ask for a url
    if (!argv.listAllAudits && !argv.listTraceCategories && argv._.length === 0) {
        throw new Error('Please provide a url');
    }
    return true;
})
    .argv;
// Process terminating command
if (cliFlags.listAllAudits) {
    Commands.ListAudits();
}
// Process terminating command
if (cliFlags.listTraceCategories) {
    Commands.ListTraceCategories();
}
const url = cliFlags._[0];
let config = null;
if (cliFlags.configPath) {
    // Resolve the config file path relative to where cli was called.
    cliFlags.configPath = path.resolve(process.cwd(), cliFlags.configPath);
    config = require(cliFlags.configPath);
}
else if (cliFlags.perf) {
    config = perfOnlyConfig;
}
// set logging preferences
cliFlags.logLevel = 'info';
if (cliFlags.verbose) {
    cliFlags.logLevel = 'verbose';
}
else if (cliFlags.quiet) {
    cliFlags.logLevel = 'silent';
}
log.setLevel(cliFlags.logLevel);
/**
 * If the requested port is 0, set it to a random, unused port.
 */
function initPort(flags) {
    return Promise.resolve().then(() => {
        if (flags.port !== 0) {
            log.verbose('Lighthouse CLI', `Using supplied port ${flags.port}`);
            return;
        }
        log.verbose('Lighthouse CLI', 'Generating random port.');
        return randomPort.getRandomPort().then(portNumber => {
            flags.port = portNumber;
            log.verbose('Lighthouse CLI', `Using generated port ${flags.port}.`);
        });
    });
}
/**
 * Attempts to connect to an instance of Chrome with an open remote-debugging
 * port. If none is found and the `skipAutolaunch` flag is not true, launches
 * a debuggable instance.
 */
function getDebuggableChrome(flags) {
    const chromeLauncher = new chrome_launcher_1.ChromeLauncher({
        port: flags.port,
        additionalFlags: flags.chromeFlags.split(' '),
        autoSelectChrome: !flags.selectChrome,
    });
    // Kill spawned Chrome process in case of ctrl-C.
    process.on(_SIGINT, () => {
        chromeLauncher.kill().then(() => process.exit(_SIGINT_EXIT_CODE), handleError);
    });
    return chromeLauncher
        .isDebuggerReady()
        .catch(() => {
        if (flags.skipAutolaunch) {
            return;
        }
        // If not, create one.
        log.log('Lighthouse CLI', 'Launching Chrome...');
        return chromeLauncher.run();
    })
        .then(() => chromeLauncher);
}
function showConnectionError() {
    console.error('Unable to connect to Chrome');
    console.error('If you\'re using lighthouse with --skip-autolaunch, ' +
        'make sure you\'re running some other Chrome with a debugger.');
    process.exit(_RUNTIME_ERROR_CODE);
}
function showRuntimeError(err) {
    console.error('Runtime error encountered:', err);
    if (err.stack) {
        console.error(err.stack);
    }
    process.exit(_RUNTIME_ERROR_CODE);
}
function showProtocolTimeoutError() {
    console.error('Debugger protocol timed out while connecting to Chrome.');
    process.exit(_PROTOCOL_TIMEOUT_EXIT_CODE);
}
function showPageLoadError() {
    console.error('Unable to load the page. Please verify the url you are trying to review.');
    process.exit(_RUNTIME_ERROR_CODE);
}
function handleError(err) {
    if (err.code === 'PAGE_LOAD_ERROR') {
        showPageLoadError();
    }
    else if (err.code === 'ECONNREFUSED') {
        showConnectionError();
    }
    else if (err.code === 'CRI_TIMEOUT') {
        showProtocolTimeoutError();
    }
    else {
        showRuntimeError(err);
    }
}
function saveResults(results, artifacts, flags) {
    let promise = Promise.resolve(results);
    const cwd = process.cwd();
    // Use the output path as the prefix for all generated files.
    // If no output path is set, generate a file prefix using the URL and date.
    const configuredPath = !flags.outputPath || flags.outputPath === 'stdout' ?
        getFilenamePrefix(results) : flags.outputPath.replace(/\.\w{2,4}$/, '');
    const resolvedPath = path.resolve(cwd, configuredPath);
    if (flags.saveArtifacts) {
        assetSaver.saveArtifacts(artifacts, resolvedPath);
    }
    if (flags.saveAssets) {
        promise = promise.then(_ => assetSaver.saveAssets(artifacts, results.audits, resolvedPath));
    }
    if (flags.output === Printer.OutputMode[Printer.OutputMode.none]) {
        promise = promise
            .then(_ => Printer.write(results, 'html', `${resolvedPath}.report.html`))
            .then(_ => {
            if (flags.view)
                return opn(`${resolvedPath}.report.html`, { wait: false });
            log.warn('CLI', 'Report output no longer defaults to stdout. Use `--output=pretty` to re-enable.');
            log.log('CLI', 'Protip: Run lighthouse with `--view` to immediately open the HTML report in your browser');
        });
    }
    return promise.then(_ => {
        if (Array.isArray(flags.output)) {
            return flags.output.reduce((innerPromise, outputType) => {
                const outputPath = `${resolvedPath}.report.${outputType}`;
                return innerPromise.then((_) => Printer.write(results, outputType, outputPath));
            }, Promise.resolve(results));
        }
        else {
            return Printer.write(results, flags.output, flags.outputPath);
        }
    });
}
function runLighthouse(url, flags, config) {
    return __awaiter(this, void 0, void 0, function* () {
        let chromeLauncher = undefined;
        try {
            yield initPort(flags);
            const chromeLauncher = yield getDebuggableChrome(flags);
            const results = yield lighthouse(url, flags, config);
            const artifacts = results.artifacts;
            delete results.artifacts;
            yield saveResults(results, artifacts, flags);
            if (flags.interactive) {
                yield performanceXServer.hostExperiment({ url, flags, config }, results);
            }
            return yield chromeLauncher.kill();
        }
        catch (err) {
            if (typeof chromeLauncher !== 'undefined') {
                yield chromeLauncher.kill();
            }
            return handleError(err);
        }
    });
}
exports.runLighthouse = runLighthouse;
function run() {
    return runLighthouse(url, cliFlags, config);
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,